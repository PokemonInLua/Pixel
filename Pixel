

--[[
	Name: Pixel
	Author: Wassil Janssen a.k.a. Creator
	Licence: GNU GENERAL PUBLIC LICENSE
	Description: A GUI library specifically written for ComputerCraft
]]--



--[[
	Name: Button
	Author: Wassil Janssen a.k.a. Creator
	Licence: GNU GENERAL PUBLIC LICENSE
	Description: The button module
]]--

function Button(x,y,width,height,xText,yText,text,textColor,bgColor,textColorOnPress,bgColorOnPress,onRightClick,onLeftClick)
	--Private--
	local x = x or 1
	local y = y or 1
	local width = width or 11
	local height = height or 3
	local xText = xText or 2
	local yText = yText or 2
	local text = text or "I, button"
	local textColor = textColor or colors.black
	local bgColor = bgColor or colors.white
	local textColorOnPress = textColorOnPress or colors.white
	local bgColorOnPress = bgColorOnPress or colors.black
	local onRightClick = onRightClick or function()end
	local onLeftClick = onLeftClick or function()end
	local xOffset = 0
	local yOffset = 0
	local finalX = xOffset + x
	local finalY = yOffset + y
	local parent = {}

	--Public--
	local self = {}
	function self.draw(isPressed)
		if (finalX <= 51 or finalX+width-1 >= 1) and (finalY <= 51 or finalY+height-1 >= 1) then
			paintutils.drawFilledBox(finalX,finalY,finalX+width-1,finalY+height-1,isPressed and bgColorOnPress or bgColor)
			term.setCursorPos(finalX+xText-1,finalY+yText-1)
			term.setTextColor(isPressed and textColorOnPress or textColor)
			term.write(text)
		end
	end
	function self.move(xNew,yNew)
		x = xNew
		y = yNew
		finalX = xOffset + x
		finalY = yOffset + y
	end
	function self.resize(w,h)
		width = w
		height = h
	end
	function self.get(ser)
		return {
			x = x,
			y = y,
			width = width,
			height = height,
			xText = xText,
			yText = yText,
			text = text,
			textColor = textColor,
			bgColor = bgColor,
			textColorOnPress = textColorOnPress,
			bgColorOnPress = bgColorOnPress,
		}
	end
	function self.set(targs)
		x = targs.x or x
		y = targs.y or y
		width = targs.width or width
		height = targs.height or height
		xText = targs.xText or xText
		yText = targs.yText or yText
		text = targs.text or text
		textColor = targs.textColor or textColor
		bgColor = targs.bgColor or bgColor
		textColorOnPress = targs.textColorOnPress or textColorOnPress
		bgColorOnPress = targs.bgColorOnPress or bgColorOnPress
		onRightClick = targs.onRightClick or onRightClick
		onLeftClick = targs.onLeftClick or onLeftClick
		finalX = xOffset + x
		finalY = yOffset + y
	end
	function self.setOffset(xOffsetT,yOffsetT)
		xOffset = xOffsetT
		yOffset = yOffsetT
		finalX = xOffset + x
		finalY = yOffset + y
	end
	function self.event(e)
		if e[1] == "mouse_click" then
			if finalX <= e[3] and e[3] <= finalX+width-1 and finalY <= e[4] and e[4] <= finalY+height-1 then
				if e[2] == 1 then
					self.draw(true)
					onLeftClick(self,e)
				elseif e[2] == 2 then
					self.draw(true)
					onRightClick(self,e)
				end
			end
		end
	end
	self.type = "Button"
	self.canRun = false
	function self.callParent(method,...)
		parent[method](...)
	end
	function self.setParent(par)
		parent = par
	end
	return self
end





--[[
	Name: Image
	Author: Wassil Janssen a.k.a. Creator
	Licence: GNU GENERAL PUBLIC LICENSE
	Description: An image drawer
]]--

function Image(x,y,path)
	--Private
	local x = x or 1
	local y = y or 1
	local xOffset = 0
	local yOffset = 0
	local finalX = xOffset + x
	local finalY = yOffset + y
	local data = fs.exists(path) and paintutils.loadImage(path) or {{16384}}
	--Public
	local self = {}
	function self.draw()
		paintutils.drawImage(data,finalX,finalY)
	end
	function self.move(xNew,yNew)
		x = xNew
		y = yNew
		finalX = xOffset + x
		finalY = yOffset + y
	end
	function self.get(ser)
		return {
			x = x,
			y = y,
			text = text,
			textColor = textColor,
			bgColor = bgColor,
		}
	end
	function self.set(targs)
		x = targs.x or x
		y = targs.y or y
		text = targs.text or text
		textColor = targs.textColor or textColor
		bgColor = targs.bgColor or bgColor
		finalX = xOffset + x
		finalY = yOffset + y
	end
	function self.setOffset(xOffsetT,yOffsetT)
		xOffset = xOffsetT
		yOffset = yOffsetT
		finalX = xOffset + x
		finalY = yOffset + y
	end
	function self.getType()
		return "Image"
	end
	function self.event(...)

	end
	return self
end

--[[
	Name: Label
	Author: Wassil Janssen a.k.a. Creator
	Licence: GNU GENERAL PUBLIC LICENSE
	Description: Label class
]]--

function Label(x,y,text,textColor,backgroundColor)
	--Private
	local text = text or ""
	local textColor = textColor or colors.white
	local backgroundColor = backgroundColor or colors.black
	local x = x or 1
	local y = y or 1
	local xOffset = 0
	local yOffset = 0
	local finalX = xOffset + x
	local finalY = yOffset + y
	--Public
	local self = {}
	function self.draw(isPressed)
		term.setCursorPos(finalX,finalY)
		term.setBackgroundColor(backgroundColor)
		term.setTextColor(textColor)
		term.write(text)
	end
	function self.move(xNew,yNew)
		x = xNew
		y = yNew
		finalX = xOffset + x
		finalY = yOffset + y
	end
	function self.get(ser)
		return {
			x = x,
			y = y,
			text = text,
			textColor = textColor,
			backgroundColor = backgroundColor,
		}
	end
	function self.set(targs)
		x = targs.x or x
		y = targs.y or y
		text = targs.text or text
		textColor = targs.textColor or textColor
		backgroundColor = targs.backgroundColor or backgroundColor
		finalX = xOffset + x
		finalY = yOffset + y
	end
	function self.setOffset(xOffsetT,yOffsetT)
		xOffset = xOffsetT
		yOffset = yOffsetT
		finalX = xOffset + x
		finalY = yOffset + y
	end
	function self.getType()
		return "Label"
	end
	function self.event(...)

	end
	return self
end

--[[
	Name: Layout
	Author: Wassil Janssen a.k.a. Creator
	Licence: GNU GENERAL PUBLIC LICENSE
	Description: A container for other objects
]]--

function Layout(x,y,width,height,color,transparent,isActive)
	--Private
	local x = x or 1
	local y = y or 1
	local width = width or 10
	local height = height or 10
	local color = color or colors.white
	local transparent = transparent or false
	local xOffset = 0
	local yOffset = 0
	local finalX = xOffset + x
	local finalY = yOffset + y
	local children = {}
	local isActive = isActive == false and false or true
	local parent = {}
	local bindings = {}

	--Public
	local self = {}
	function self.draw(isPressed)
		if isActive  and (finalX <= 51 or finalX+width-1 >= 1) and (finalY <= 51 or finalY+height-1 >= 1) then
			if not transparent then
				paintutils.drawFilledBox(finalX,finalY,finalX+width-1,finalY+height-1,color)
			end
			for i,v in pairs(children) do
				for k,m in pairs(v) do
					m.setOffset(finalX-1,finalY-1)
					m.draw()
				end
			end
		end
	end
	function self.move(xNew,yNew)
		x = xNew
		y = yNew
		finalX = xOffset + x
		finalY = yOffset + y
	end
	function self.get(ser)
		return {
			x = x,
			y = y,
			width = width,
			height = height,
			color = color,
			transparent = transparent,
			isActive = isActive,
		}
	end
	function self.set(targs)
		x = targs.x or x
		y = targs.y or y
		width = targs.width or width
		height = targs.height or height
		color = targs.color or color
		transparent = targs.transparent or transparent
		children = targs.children or children
		isActive = targs.isActive or isActive
		finalX = xOffset + x
		finalY = yOffset + y
	end
	function self.setOffset(xOffsetT,yOffsetT)
		xOffset = xOffsetT
		yOffset = yOffsetT
		finalX = xOffset + x
		finalY = yOffset + y
	end
	self.type = "Layout"
	function self.event(e)
		if isActive then
			for i,v in pairs(children) do
				for k,m in pairs(v) do
					m.event(e)
				end
			end
		end
	end
	function self.setParent(par)
		parent = par
	end
	function self.callParent(method,...)
		parent[method](...)
	end
	function self.addChild(kid)
		local typ = kid.type
		if not children[typ] then
			children[typ] = {}
		end
		children[typ][#children[typ]+1] = kid
		children[typ][#children[typ]].setParent(self)
		if children[typ][#children[typ]].setBindings then
			children[typ][#children[typ]].setBindings(bindings)
		end
	end
	function self.setBindings(b)
		bindings = b
	end
	return self
end

--[[
	Name: Menu
	Author: Wassil Janssen a.k.a. Creator
	Licence: GNU GENERAL PUBLIC LICENSE
	Description: A drop down with out a scrollbar.
]]--
--[[
	Item structure:
	1. clickable
	{
		type = "clickable",
		onRightClick = function,
		onLeftClick = function,
		text = text
		shortcut = number key
		shText = text
	}
	2. separator
	{
		type = "separator"
		char = aChar
	}
]]--

function Menu()
	--Private
	local x = 1
	local y = 1
	local text = ""
	local width = 3
	local bgColor = 1
	local textColor = 1
	local xOffset = 0
	local yOffset = 0
	local finalX = xOffset + x
	local finalY = yOffset + y
	local bindings = {}
	local items = {}
	local onRightClick
	local itemBg = 1
	local itemTxt = 1
	local doRun = true
	--Public
	local self = {}
	function self.draw()
		term.setCursorPos(finalX,finalY)
		term.setBackgroundColor(bgColor)
		term.setTextColor(textColor)
		term.write(" "..text.." ")
	end
	function self.move(xNew,yNew)
		x = xNew
		y = yNew
		finalX = xOffset + x
		finalY = yOffset + y
	end
	function self.get(ser)
		return {
			x = x,
			y = y,
			text = text,
			textColor = textColor,
			bgColor = bgColor,
			items = items,
			onRightClick = onRightClick,
			itemBg = itemBg,
			itemTxt = itemTxt,
		}
	end
	function self.set(targs)
		x = targs.x or x
		y = targs.y or y
		text = targs.text or text
		textColor = targs.textColor or textColor
		bgColor = targs.bgColor or bgColor
		items = targs.items or items
		onRightClick = targs.onRightClick or onRightClick
		finalX = xOffset + x
		finalY = yOffset + y
		itemBg = targs.itemBg or itemBg
		itemTxt = targs.itemTxt or itemTxt
		width = #text+2
	end
	function self.setOffset(xOffsetT,yOffsetT)
		xOffset = xOffsetT
		yOffset = yOffsetT
		finalX = xOffset + x
		finalY = yOffset + y
	end
	self.type = "Menu"
	self.canRun = true
	function self.event(e)
		if e[1] == "mouse_click" then
			if e[4] == finalY and finalX <= e[3] and e[3] <= finalX+width-1 then
				if e[2] == 1 then
					self.run()
				elseif e[2] == 2 then
					onRightClick(self,e)
				end
			end
		end
	end
	function self.setBindings(b)
		bindings = b
	end
	function self.getWidth()
		return 2+#text
	end
	function self.run()
		doRun = true
		local  size = 3
		local localx = 0
		tx = term.getSize()
		for i,v in pairs(items) do
			if v.type == "clickable" then
				local bu = #v.text + #v.shText + 1
				if bu > size then
					size = bu
				end
				bu = nil
			end
		end
		localx = finalX+size-1 <= tx and finalX or tx - (bu+2)
		while true do
			term.setBackgroundColor(itemBg)
			term.setTextColor(itemTxt)
			for i,v in pairs(items) do
				term.setCursorPos(localx,finalY+i)
				if v.type == "clickable" then
					term.write(" "..v.text..string.rep(" ",size-#v.text-#v.shText)..v.shText.." ")
				elseif v.type == "separator" then
					term.write(" "..string.rep(v.char,size).." ")
				end
			end
			os.pullEvent()
		end
	end
	return self
end









